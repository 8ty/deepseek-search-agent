name: 🔍 DeepSeek 搜索代理

on:
  repository_dispatch:
    types: [search_trigger]
  workflow_dispatch:
    inputs:
      query:
        description: '搜索查询'
        required: true
        type: string
      callback_url:
        description: '回调 URL'
        required: false
        type: string
      workspace_id:
        description: '工作空间 ID'
        required: false
        type: string
      max_rounds:
        description: '最大迭代轮数'
        required: false
        type: string
        default: '5'
      debug_mode:
        description: '调试模式（显示详细日志）'
        required: false
        type: boolean
        default: false

jobs:
  search:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛠️ 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 执行搜索
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
        ENVIRONMENT: "production"
        # 从 repository_dispatch 获取参数
        SEARCH_QUERY: ${{ github.event.client_payload.query || inputs.query }}
        CALLBACK_URL: ${{ github.event.client_payload.callback_url || inputs.callback_url }}
        WORKSPACE_ID: ${{ github.event.client_payload.search_id || github.event.client_payload.workspace_id || inputs.workspace_id }}
        MAX_ROUNDS: ${{ github.event.client_payload.max_rounds || inputs.max_rounds }}
        INCLUDE_SCRAPING: ${{ github.event.client_payload.include_scraping || 'true' }}
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
        # GitHub 信息
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_ACTIONS: "true"
        RUNNER_OS: ${{ runner.os }}
      run: |
        echo "🚀 启动 DeepSeek 搜索代理"
        
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "🐛 调试模式已启用 - 显示详细信息"
          echo "📋 搜索查询: $SEARCH_QUERY"
          echo "📞 回调 URL: $CALLBACK_URL"
          echo "🏠 工作空间: $WORKSPACE_ID"
          echo "🔄 最大轮数: $MAX_ROUNDS"
          echo "🔧 包含抓取: $INCLUDE_SCRAPING"
          echo "🌍 环境: $ENVIRONMENT"
          echo "🔍 调试模式: $DEBUG_MODE"
        else
          echo "🔍 正在处理搜索请求..."
          echo "⚡ 搜索进行中，请稍候..."
        fi
        
        # 使用新的迭代搜索架构运行搜索代理
        python -m api.github_runner
        
    - name: 📋 输出执行信息
      if: always()
      env:
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
      run: |
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "✅ 搜索代理执行完成"
          echo "⏰ 执行时间: $(date)"
          echo "🔧 运行环境: ${{ runner.os }}"
          echo "🐍 Python 版本: $(python --version)"
        else
          echo "✅ 搜索任务已完成"
        fi
        
    - name: 🧹 清理历史工作流
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
      run: |
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "🧹 开始清理历史工作流..."
        fi
        
        # 获取仓库信息
        REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
        
        # 获取当前工作流的ID
        CURRENT_RUN_ID="${{ github.run_id }}"
        
        # 删除除当前运行外的所有完成的工作流运行
        # 获取所有已完成的工作流运行（除了当前的）
        gh api repos/$REPO_OWNER/$REPO_NAME/actions/runs \
          --paginate \
          --jq '.workflow_runs[] | select(.id != '$CURRENT_RUN_ID' and (.status == "completed" or .status == "cancelled" or .status == "failure")) | .id' \
          | head -20 \
          | while read run_id; do
            if [ "$DEBUG_MODE" = "true" ]; then
              echo "🗑️ 删除工作流运行: $run_id"
            fi
            gh api repos/$REPO_OWNER/$REPO_NAME/actions/runs/$run_id -X DELETE || true
            sleep 1
          done
        
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "✅ 工作流清理完成"
        fi