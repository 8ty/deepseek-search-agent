name: 🔍 DeepSeek 搜索代理

on:
  repository_dispatch:
    types: [search_trigger]
  workflow_dispatch:
    inputs:
      query:
        description: '搜索查询'
        required: true
        type: string
      callback_url:
        description: '回调 URL'
        required: false
        type: string
      workspace_id:
        description: '工作空间 ID'
        required: false
        type: string
      max_rounds:
        description: '最大迭代轮数'
        required: false
        type: string
        default: '5'
      debug_mode:
        description: '调试模式（显示详细日志）'
        required: false
        type: boolean
        default: false
      silent_mode:
        description: '静默模式（隐藏详细输出）'
        required: false
        type: boolean
        default: true

jobs:
  search:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: 🛠️ 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 执行搜索
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
        ENVIRONMENT: "production"
        # 从 repository_dispatch 获取参数
        SEARCH_QUERY: ${{ github.event.client_payload.query || inputs.query }}
        CALLBACK_URL: ${{ github.event.client_payload.callback_url || inputs.callback_url }}
        WORKSPACE_ID: ${{ github.event.client_payload.search_id || github.event.client_payload.workspace_id || inputs.workspace_id }}
        MAX_ROUNDS: ${{ github.event.client_payload.max_rounds || inputs.max_rounds }}
        INCLUDE_SCRAPING: ${{ github.event.client_payload.include_scraping || 'true' }}
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
        SILENT_MODE: ${{ github.event.client_payload.silent_mode || inputs.silent_mode || 'true' }}
        # GitHub 信息
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_ACTIONS: "true"
        RUNNER_OS: ${{ runner.os }}
      run: |
        echo "🚀 启动 DeepSeek 搜索代理"
        
        # 根据静默模式和调试模式决定输出级别
        if [ "$SILENT_MODE" = "true" ] && [ "$DEBUG_MODE" = "false" ]; then
          echo "🔇 静默模式已启用"
          echo "⚡ 搜索进行中..."
          
          # 静默执行，完全隐藏详细输出
          python -m api.github_runner >/dev/null 2>&1 || {
            echo "❌ 搜索执行失败"
            exit 1
          }
          echo "✅ 搜索完成"
          
        elif [ "$DEBUG_MODE" = "true" ]; then
          echo "🐛 调试模式已启用 - 显示详细信息"
          echo "📋 搜索查询: $SEARCH_QUERY"
          echo "📞 回调 URL: $CALLBACK_URL"
          echo "🏠 工作空间: $WORKSPACE_ID"
          echo "🔄 最大轮数: $MAX_ROUNDS"
          echo "🔧 包含抓取: $INCLUDE_SCRAPING"
          echo "🌍 环境: $ENVIRONMENT"
          echo "🔍 调试模式: $DEBUG_MODE"
          echo "🔇 静默模式: $SILENT_MODE"
          
          # 调试模式显示所有输出
          python -m api.github_runner
          
        else
          echo "🔍 正在处理搜索请求..."
          echo "⚡ 搜索进行中，请稍候..."
          
          # 标准模式，隐藏详细输出但保留错误信息
          echo "::group::🔍 搜索详细日志"
          python -m api.github_runner || {
            echo "::endgroup::"
            echo "❌ 搜索执行失败，请检查日志"
            exit 1
          }
          echo "::endgroup::"
          echo "✅ 搜索任务完成"
        fi
        
    - name: 📋 输出执行信息
      if: always()
      env:
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
        SILENT_MODE: ${{ github.event.client_payload.silent_mode || inputs.silent_mode || 'true' }}
      run: |
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "✅ 搜索代理执行完成"
          echo "⏰ 执行时间: $(date)"
          echo "🔧 运行环境: ${{ runner.os }}"
          echo "🐍 Python 版本: $(python --version)"
        elif [ "$SILENT_MODE" = "true" ]; then
          echo "✅ 任务执行完毕"
        else
          echo "✅ 搜索任务已完成"
        fi
        
    - name: 🧹 清理历史工作流
      if: always()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 2
        # delete_workflow_by_state_pattern: 'completed'
        # delete_run_by_conclusion_pattern: 'success,failure,cancelled,skipped'
        dry_run: false