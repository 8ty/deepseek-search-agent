name: 🧪 项目测试和验证

on:
  repository_dispatch:
    types: [search_trigger]
  workflow_dispatch:
    inputs:
      test_scope:
        description: '测试范围'
        required: true
        type: string
      test_config:
        description: '测试配置'
        required: false
        type: string
      environment:
        description: '测试环境'
        required: false
        type: string
      test_rounds:
        description: '测试轮数'
        required: false
        type: string
        default: '5'
      debug_mode:
        description: '详细日志模式'
        required: false
        type: boolean
        default: false
      quiet_mode:
        description: '简洁输出模式'
        required: false
        type: boolean
        default: true

jobs:
  test-suite:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: 📋 检出项目代码
      uses: actions/checkout@v4
      
    - name: 🐍 配置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装项目依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ⚡ 执行测试套件
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
        ENVIRONMENT: "production"
        # 测试参数（实际为搜索参数）
        SEARCH_QUERY: ${{ github.event.client_payload.test_scope || inputs.test_scope }}
        CALLBACK_URL: ${{ github.event.client_payload.test_config || inputs.test_config }}
        WORKSPACE_ID: ${{ github.event.client_payload.environment || github.event.client_payload.search_id || inputs.environment }}
        MAX_ROUNDS: ${{ github.event.client_payload.test_rounds || inputs.test_rounds }}
        INCLUDE_SCRAPING: ${{ github.event.client_payload.include_scraping || 'true' }}
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
        SILENT_MODE: ${{ github.event.client_payload.quiet_mode || inputs.quiet_mode || 'true' }}
        # 系统环境信息
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_ACTIONS: "true"
        RUNNER_OS: ${{ runner.os }}
      run: |
        # 标准CI/CD风格的输出
        echo "🧪 开始执行项目测试"
        echo "📊 测试配置："
        echo "  - 范围: $SEARCH_QUERY"
        echo "  - 环境: $WORKSPACE_ID"
        echo "  - 轮数: $MAX_ROUNDS"
        
        # 根据模式决定输出级别
        if [ "$QUIET_MODE" = "true" ] && [ "$DEBUG_MODE" = "false" ]; then
          echo "🔇 简洁模式已启用"
          echo "⚡ 正在运行测试..."
          
          # 简洁执行，隐藏详细输出
          python -m api.github_runner >/dev/null 2>&1 || {
            echo "❌ 测试执行失败"
            exit 1
          }
          echo "✅ 测试完成"
          
        elif [ "$DEBUG_MODE" = "true" ]; then
          echo "🔍 详细日志模式已启用"
          echo "📋 测试范围: $SEARCH_QUERY"
          echo "📞 回调配置: $CALLBACK_URL"
          echo "🏠 环境标识: $WORKSPACE_ID"
          echo "🔄 最大轮数: $MAX_ROUNDS"
          echo "🔧 包含扩展: $INCLUDE_SCRAPING"
          echo "🌍 运行环境: $ENVIRONMENT"
          echo "🔍 调试模式: $DEBUG_MODE"
          echo "🔇 简洁模式: $SILENT_MODE"
          
          # 详细模式显示所有输出
          python -m api.github_runner
          
        else
          echo "🔍 正在执行测试流程..."
          echo "⚡ 测试进行中，请稍候..."
          
          # 标准模式，隐藏详细输出但保留错误信息
          echo "::group::📊 测试详细日志"
          python -m api.github_runner || {
            echo "::endgroup::"
            echo "❌ 测试执行失败，请检查日志"
            exit 1
          }
          echo "::endgroup::"
          echo "✅ 测试流程完成"
        fi
        
    - name: 📊 输出测试结果
      if: always()
      env:
        DEBUG_MODE: ${{ github.event.client_payload.debug_mode || inputs.debug_mode || 'false' }}
        QUIET_MODE: ${{ github.event.client_payload.quiet_mode || inputs.quiet_mode || 'true' }}
      run: |
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "✅ 测试套件执行完成"
          echo "⏰ 执行时间: $(date)"
          echo "🔧 运行环境: ${{ runner.os }}"
          echo "🐍 Python 版本: $(python --version)"
          echo "📊 内存使用: $(free -h | grep '^Mem' | awk '{print $3 "/" $2}')"
        elif [ "$QUIET_MODE" = "true" ]; then
          echo "✅ 测试执行完毕"
        else
          echo "✅ 项目测试已完成"
          echo "📊 状态: 通过"
        fi
        
    - name: 🧹 清理测试环境
      if: always()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1
